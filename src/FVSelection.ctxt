#BlueJ class context
comment0.params=
comment0.target=FVSelection()
comment0.text=\n\ Empty\ constructor\ for\ the\ FVSelection\ class.\ The\ constructor\ \n\ does\ not\ need\ to\ do\ anything\ because\ this\ class\ employs\ \n\ only\ FeatureVector\ objects\ aside\ from\ primitive\ types\ and\ \n\ common\ classes\ such\ as\ String.\n
comment1.params=
comment1.target=void\ readFileAndPopulate()
comment1.text=\n\ First,\ read\ the\ data\ file\ and\ populate\ the\ featureVectors\ array\ \n\ and\ dataset\ 2d\ array.\ \n\ This\ method\ both\ reads\ the\ file\ and\ populates\ featureVectors\ and\ \n\ dataset.\ \n\ It\ figures\ out\ numberOfFeatureVectors\ and\ numberOfSamples,\ niether\ \n\ of\ which\ will\ be\ modified\ at\ any\ later\ point\ in\ the\ code.\n
comment10.params=
comment10.target=void\ constructIdealIdexesArray()
comment10.text=\n\ Constructs\ an\ array\ of\ just\ the\ indices\ that\ will\ be\ used\ in\ the\ subset\ DB\n
comment11.params=
comment11.target=void\ dealWithSubsetDataSet()
comment11.text=\n\ creates\ the\ subset\ matrix\ and\ writes\ it\ to\ a\ .csv\ file\n
comment12.params=args
comment12.target=void\ main(java.lang.String[])
comment2.params=
comment2.target=FeatureVector[]\ selectionSortEmptyDataAscending()
comment2.text=\n\ Sorts\ the\ featureVectors\ ascendingly\ based\ on\ how\ many\n\ empty\ instances\ they\ have.\ A\ selection\ sort\ traverses\ the\ \n\ array\ backwards,\ switching\ values\ when\ necessary.\ It\ keeps\n\ track\ of\ two\ indices\ consistently,\ which\ are\ always\ \n\ consecutive\ integers.\ When\ the\ value\ at\ the\ greater\ index\n\ is\ less\ than\ that\ of\ the\ lesser\ index,\ the\ objects\ in\ the\ \n\ array\ are\ switched.\ Only\ objects\ are\ swapped,\ not\ the\n\ actual\ samples.\n\ \n\ @return\ a\ FeatureVector[]\ that\ is\ the\ new\ featureVectors\ array.\n
comment3.params=
comment3.target=void\ printFeatureVectors()
comment3.text=\n\ prints\ all\ the\ featureVector\ names\ for\ the\ data.\ It\ keeps\ a\ \n\ good\ amount\ of\ space\ in\ between\ each\ line\ so\ the\ user\ can\ read\ \n\ the\ array\ easily\ and\ prints\ an\ empty\ line\ after\ it\ to\ keep\ the\ \n\ terminal\ window\ organized.\n
comment4.params=sorted
comment4.target=void\ printData(boolean)
comment4.text=\n\ prints\ the\ data\ in\ the\ specified\ 2d\ array.\ If\ the\ instance\n\ is\ empty,\ which\ is\ represented\ by\ Float.MAX_VALUE,\ the\ word\ \n\ "empty"\ is\ printed.\ There\ is\ a\ good\ amount\ of\ space\ left\ between\ \n\ each\ element\ so\ that\ the\ user\ can\ view\ the\ data\ more\ easily.\ The\ \n\ parameter\ used\ here\ serves\ the\ purpose\ of\ giving\ the\ user\ the\ \n\ option\ of\ whether\ of\ not\ the\ sorted\ data\ or\ the\ unsorted\ data\ \n\ should\ be\ printed.\n\ \n\ @param\ \ \ sorted\ a\ boolean\ that\ specifies\ whether\ or\ not\ the\ sorted\ \n\ \ \ \ \ \ \ \ \ \ data\ should\ be\ printed.\n
comment5.params=
comment5.target=void\ printAnalysis()
comment5.text=\n\ prints\ the\ analysis\ array.\ The\ word\ "analysis"\ is\ printed\ \n\ a\ line\ before\ the\ data\ so\ that\ the\ terminal\ window\ stays\ \n\ organized.\ A\ good\ amount\ of\ space\ is\ left\ between\ each\ \n\ element\ to\ make\ viewing\ the\ data\ easier\ on\ the\ user.\n
comment6.params=
comment6.target=void\ featureVectorAnalysis()
comment6.text=\n\ This\ method\ implements\ the\ algorithm\ that\ this\ class\ is\ \n\ centered\ around.\ It\ cumulatively\ calculates\ how\ many\ \n\ full\ samples\ there\ are\ for\ each\ feature\ vector\ in\ the\ \n\ sorted\ array.\ The\ algorithm\ here\ basically\ asks\ this\ question\:\n\ In\ the\ sorted\ data,\ for\ each\ FV,\ how\ many\ samples\ are\ still\ \n\ perfectly\ full?\ It\ traverses\ the\ 2d\ array\ from\ left\ to\ \n\ right\ and\ every\ time\ it\ gets\ to\ a\ new\ FV,\ it\ checks\ to\ \n\ see\ how\ many\ samples\ still\ have\ no\ empty\ instances\n\ \n
comment7.params=
comment7.target=void\ populateFirstFileOutput()
comment7.text=\n\ Creates\ the\ first\ output\ file\ for\ this\ program\n
comment8.params=lastFV
comment8.target=int\ emptyDataSubset(int)
comment8.text=\n\ calculates\ how\ much\ empty\ data\ is\ in\ a\ subset\n\ \u0153\u0153\u0153\u2211\n\ @param\ lastFV\ the\ last\ FV\ that\ is\ used\ for\ the\ subset\n\ \n\ @return\ the\ amount\ of\ empty\ data\ fields\ are\ in\ the\ subset\n
comment9.params=
comment9.target=void\ takeSecondInput()
comment9.text=\n\ takes\ the\ second\ input\ from\ the\ user\ to\ be\ used\ for\ the\ subset\ portion\ of\ the\ program.\n
numComments=13
